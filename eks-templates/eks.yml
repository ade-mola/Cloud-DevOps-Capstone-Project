Description: >
  'Ademola Olokun | Amazon EKS Script'
  'This template deploys VPC, subnets and security group for EKS Cluster and Worker Nodes'

Parameters:

  EnvironmentName:
    Description: Amazon EKS Script
    Type: String
    
  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.32.0.0/16

  Subnet1CIDR:
    Description: The IP range (CIDR notation) for subnet 1
    Type: String
    Default: 172.32.0.0/24

  Subnet2CIDR:
    Description: The IP range (CIDR notation) for subnet 2
    Type: String
    Default: 172.32.1.0/24

  Subnet3CIDR:
    Description: The IP range (CIDR notation) for subnet 3
    Type: String
    Default: 172.32.2.0/24

  ClusterName:
    Description: EKS Cluster Name
    Type: String

  DesiredInstances:
    Description: How many instances should be created.
    Type: Number

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

Resources:

# Network Configuration

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Network 
          Value: Public
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes 

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Subnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Subnet2

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref Subnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Subnet3

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref PublicRouteTable

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ClusterSecGroup
      GroupDescription: Security Group for EKS Cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0

# EKS Cluster Configuration

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        -  "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        -  "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal:
                Service: 
                  - "eks.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EKS Cluster Role

  EKSCluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Version: '1.15'
      RoleArn: !GetAtt EKSClusterRole.Arn #required
      ResourcesVpcConfig: #required
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup 
        SubnetIds: [!Ref Subnet1, !Ref Subnet2, !Ref Subnet3]
      Name: !Ref ClusterName

# Worker Nodes Configuration

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: #required
        - !Ref WorkerNodeRole
  
  WorkerNodeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

  WorkerNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt WorkerNodeRole.Arn
      InstanceTypes:
        - t2.micro
      RemoteAccess:
        Ec2SshKey: !Ref KeyName
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      ScalingConfig:
        DesiredSize: !Sub ${DesiredInstances}
        MinSize: 1
        MaxSize: 3

  NodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the nodes.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
        Value: 'owned'

  NodesAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Sub ${DesiredInstances}
      LaunchConfigurationName: !Ref NodeLaunchConfiguration
      MinSize: "1"
      MaxSize: "3"
      VPCZoneIdentifier:
        - Ref: "Subnet1"
        - Ref: "Subnet2"
        - Ref: "Subnet3"
      Tags:
      - Key: Name
        Value: !Sub ${ClusterName}-Node
        PropagateAtLaunch: true
      - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
        Value: 'owned'
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref DesiredInstances
        PauseTime: PT5M

  NodeLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: ami-0fc20dd1da406780b
      InstanceType: t3.medium
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref NodesSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
                #!/bin/bash
                set -o xtrace
                /etc/eks/bootstrap.sh ${ClusterName}
                /opt/aws/bin/cfn-signal --exit-code $? \
                         --stack  ${AWS::StackName} \
                         --resource NodesAutoScalingGroup  \
                         --region ${AWS::Region}

# Outputs

Outputs:

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC

  SubnetIds:
    Description: The subnet ids.
    Value: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2, !Ref Subnet3 ] ]

  SecurityGroup:
    Description: Cluster security group.
    Value: !Ref ClusterSecurityGroup

  EKS:
    Description: EKS Cluster
    Value: !Ref EKSCluster
    
  EKSUrl:
    Description: EKS URL
    Value: !GetAtt EKSCluster.Endpoint
